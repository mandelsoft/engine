package model

import (
	"k8s.io/apimachinery/pkg/util/sets"
)

var final = sets.Set[Status]{}.Insert(STATUS_COMPLETED, STATUS_FAILED, STATUS_INVALID, STATUS_BLOCKED /*???*/)

func IsFinalStatus(s Status) bool {
	return final.Has(s)
}

var statusmerge = map[Status]map[Status]Status{
	STATUS_INITIAL: {
		STATUS_INITIAL:    STATUS_INITIAL,
		STATUS_COMPLETED:  STATUS_COMPLETED,
		STATUS_BLOCKED:    STATUS_BLOCKED,
		STATUS_FAILED:     STATUS_FAILED,
		STATUS_INVALID:    STATUS_INVALID,
		STATUS_PENDING:    STATUS_PENDING,
		STATUS_PREPARING:  STATUS_PREPARING,
		STATUS_PROCESSING: STATUS_PROCESSING,
		STATUS_WAITING:    STATUS_WAITING,
		STATUS_DELETED:    STATUS_DELETED,
	},
	STATUS_COMPLETED: {
		STATUS_INITIAL:    STATUS_COMPLETED,
		STATUS_COMPLETED:  STATUS_COMPLETED,
		STATUS_BLOCKED:    STATUS_BLOCKED,
		STATUS_FAILED:     STATUS_FAILED,
		STATUS_INVALID:    STATUS_INVALID,
		STATUS_PENDING:    STATUS_PENDING,
		STATUS_PREPARING:  STATUS_PREPARING,
		STATUS_PROCESSING: STATUS_PROCESSING,
		STATUS_WAITING:    STATUS_WAITING,
		STATUS_DELETED:    STATUS_COMPLETED,
	},
	STATUS_BLOCKED: {
		STATUS_INITIAL:    STATUS_BLOCKED,
		STATUS_COMPLETED:  STATUS_BLOCKED,
		STATUS_BLOCKED:    STATUS_BLOCKED,
		STATUS_FAILED:     STATUS_BLOCKED,
		STATUS_INVALID:    STATUS_BLOCKED,
		STATUS_PENDING:    STATUS_PENDING,
		STATUS_PREPARING:  STATUS_PREPARING,
		STATUS_PROCESSING: STATUS_PROCESSING,
		STATUS_WAITING:    STATUS_WAITING,
		STATUS_DELETED:    STATUS_DELETED,
	},
	STATUS_INVALID: {
		STATUS_INITIAL:    STATUS_INVALID,
		STATUS_COMPLETED:  STATUS_INVALID,
		STATUS_BLOCKED:    STATUS_BLOCKED,
		STATUS_FAILED:     STATUS_INVALID,
		STATUS_INVALID:    STATUS_INVALID,
		STATUS_PENDING:    STATUS_PENDING,
		STATUS_PREPARING:  STATUS_PREPARING,
		STATUS_PROCESSING: STATUS_PROCESSING,
		STATUS_WAITING:    STATUS_WAITING,
		STATUS_DELETED:    STATUS_DELETED,
	},
	STATUS_FAILED: {
		STATUS_INITIAL:    STATUS_FAILED,
		STATUS_COMPLETED:  STATUS_FAILED,
		STATUS_BLOCKED:    STATUS_BLOCKED,
		STATUS_FAILED:     STATUS_FAILED,
		STATUS_INVALID:    STATUS_INVALID,
		STATUS_PENDING:    STATUS_PENDING,
		STATUS_PREPARING:  STATUS_PREPARING,
		STATUS_PROCESSING: STATUS_PROCESSING,
		STATUS_WAITING:    STATUS_WAITING,
		STATUS_DELETED:    STATUS_DELETED,
	},
	STATUS_PENDING: {
		STATUS_INITIAL:    STATUS_PENDING,
		STATUS_COMPLETED:  STATUS_PENDING,
		STATUS_BLOCKED:    STATUS_PENDING,
		STATUS_FAILED:     STATUS_PENDING,
		STATUS_INVALID:    STATUS_PENDING,
		STATUS_PENDING:    STATUS_PENDING,
		STATUS_PREPARING:  STATUS_PREPARING,
		STATUS_PROCESSING: STATUS_PROCESSING,
		STATUS_WAITING:    STATUS_WAITING,
		STATUS_DELETED:    STATUS_DELETED,
	},
	STATUS_PREPARING: {
		STATUS_INITIAL:    STATUS_PREPARING,
		STATUS_COMPLETED:  STATUS_PREPARING,
		STATUS_BLOCKED:    STATUS_PREPARING,
		STATUS_FAILED:     STATUS_PREPARING,
		STATUS_INVALID:    STATUS_PREPARING,
		STATUS_PENDING:    STATUS_PREPARING,
		STATUS_PREPARING:  STATUS_PREPARING,
		STATUS_PROCESSING: STATUS_PROCESSING,
		STATUS_WAITING:    STATUS_WAITING,
		STATUS_DELETED:    STATUS_DELETED,
	},
	STATUS_WAITING: {
		STATUS_INITIAL:    STATUS_WAITING,
		STATUS_COMPLETED:  STATUS_WAITING,
		STATUS_BLOCKED:    STATUS_WAITING,
		STATUS_FAILED:     STATUS_WAITING,
		STATUS_INVALID:    STATUS_WAITING,
		STATUS_PENDING:    STATUS_WAITING,
		STATUS_PREPARING:  STATUS_WAITING,
		STATUS_PROCESSING: STATUS_PROCESSING,
		STATUS_WAITING:    STATUS_WAITING,
		STATUS_DELETED:    STATUS_DELETED,
	},
	STATUS_PROCESSING: {
		STATUS_INITIAL:    STATUS_PROCESSING,
		STATUS_COMPLETED:  STATUS_PROCESSING,
		STATUS_BLOCKED:    STATUS_PROCESSING,
		STATUS_FAILED:     STATUS_PROCESSING,
		STATUS_INVALID:    STATUS_PROCESSING,
		STATUS_PENDING:    STATUS_PROCESSING,
		STATUS_PREPARING:  STATUS_PROCESSING,
		STATUS_PROCESSING: STATUS_PROCESSING,
		STATUS_WAITING:    STATUS_PROCESSING,
		STATUS_DELETED:    STATUS_PROCESSING,
	},
	STATUS_DELETED: {
		STATUS_INITIAL:    STATUS_DELETED,
		STATUS_COMPLETED:  STATUS_COMPLETED,
		STATUS_BLOCKED:    STATUS_BLOCKED,
		STATUS_FAILED:     STATUS_FAILED,
		STATUS_INVALID:    STATUS_FAILED,
		STATUS_PENDING:    STATUS_PENDING,
		STATUS_PREPARING:  STATUS_PREPARING,
		STATUS_PROCESSING: STATUS_PROCESSING,
		STATUS_WAITING:    STATUS_WAITING,
		STATUS_DELETED:    STATUS_DELETED,
	},
}

func MergeStatus(a, b Status) Status {
	n := statusmerge[a]
	if n != nil {
		m, ok := n[b]
		if ok {
			return m
		}
		return a
	} else {
		return b
	}
}
